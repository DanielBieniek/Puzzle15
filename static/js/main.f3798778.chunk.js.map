{"version":3,"sources":["components/Game.js","components/Moves.js","components/Time.js","components/NewGameButton.js","components/Win.js","components/ChangeSize.js","App.js","serviceWorker.js","index.js"],"names":["Game","setTileStyle","val","index","nextVal","width","_this","props","size","textHeight","flexBasis","paddingTop","paddingBottom","lineHeight","fontSize","backgroundColor","generateTiles","board","map","react_default","a","createElement","className","id","key","style","findNextTile","onClick","move","bind","Object","assertThisInitialized","this","length","ref","Component","Moves","moves","Time","time","NewGameButton","Win","winStyle","display","win","ChangeSize","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","parseTime","state","Math","floor","newBoard","i","push","sort","b","random","checkIfSolvable","clearInterval","timer","setState","startTimer","setInterval","swap","temp","checkWin","tempBoard","direction","checkPossibleDirection","currentIndex","findIndex","v","toConsumableArray","changeSize","invCount","j","blankPos","abs","NewGameButton_NewGameButton","Time_Time","Moves_Moves","Game_Game","ChangeSize_ChangeSize","Win_Win","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3798778.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Game extends Component {\r\n    findNextTile() {\r\n        if(this.props.board.length) {\r\n            let board = this.props.board;\r\n            let nextVal = 1;\r\n            while(nextVal<board.length) {\r\n                if(board[nextVal-1]!==nextVal) break;\r\n                nextVal++;\r\n            }\r\n            return nextVal;\r\n        }\r\n    }\r\n    setTileStyle = (val, index, nextVal) => {\r\n        let width = (100/this.props.size)-1;\r\n        let textHeight = 'calc(40px + '+10/this.props.size+'vmin)';\r\n        return({\r\n            flexBasis: width+'%',\r\n            paddingTop: (width/8)+'%',\r\n            paddingBottom: (width/8*7)+'%',\r\n            lineHeight: textHeight,\r\n            fontSize: textHeight,\r\n            backgroundColor: val === index+1 ?'#1F3338':(val===nextVal?'#382a1f':(val===0?'#435579':'#1f2738'))\r\n        })\r\n    }\r\n    generateTiles = () => {\r\n        return (this.props.board.map( (val, index) => {\r\n            return(\r\n                <div className=\"tile\" id={\"tile\"+val} key={val} style={this.setTileStyle(val, index, this.findNextTile())} onClick={this.props.move.bind(this, index)}> \r\n                {val?val:''}\r\n                </div>\r\n            );\r\n        }))\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Game\" ref=\"gameWindow\">\r\n                {this.generateTiles()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Moves extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Moves\">\r\n                Moves<br/>{this.props.moves}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Time extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Time\">\r\n                Time<br/>{this.props.time}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class NewGameButton extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"NewGameButton\" onClick={this.props.onClick}>\r\n                New Game\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Win extends Component {\r\n    winStyle = () => {\r\n        return {  display: this.props.win ? 'block' : 'none'}\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"winBox\" style={this.winStyle()}>\r\n                <div className=\"win\">\r\n                    <b>You won!</b><br/>\r\n                    Time: {this.props.time}<br/>\r\n                    Moves: {this.props.moves}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class ChangeSize extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"ChangeSizeBox\">\r\n                <div className=\"ChangeSizeItem\" onClick={() => this.props.onClick(3)}>3x3</div>\r\n                <div className=\"ChangeSizeItem\" onClick={() => this.props.onClick(4)}>4x4</div>\r\n                <div className=\"ChangeSizeItem\" onClick={() => this.props.onClick(5)}>5x5</div>\r\n                <div className=\"ChangeSizeItem\" onClick={() => this.props.onClick(6)}>6x6</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Game from './components/Game';\nimport Moves from './components/Moves';\nimport Time from './components/Time';\nimport NewGameButton from './components/NewGameButton';\nimport Win from './components/Win';\nimport ChangeSize from './components/ChangeSize';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { size: 4, moves: 0, time: 0, board: [], win: false }\n  }\n\n  componentDidMount() {\n    this.newBoard();\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  parseTime = () => {\n    let timeStr = '';\n    let time = this.state.time;\n    if(time<60) timeStr = time+'s';\n    else timeStr = Math.floor(time/60) + 'm '+time%60 + 's';\n    return timeStr;\n  }\n\n\n  newBoard = () => {\n    let board = [];\n    let size = this.state.size;\n    //board = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15, 0];\n    for(let i = 0; i<size*size; i++) {board.push(i)} //generate a 0...size**2 array\n    do{\n      board.sort(function(a, b){return 0.5 - Math.random()}); //randomise the array\n    }\n    while(!this.checkIfSolvable(board, size));\n    clearInterval(this.timer);\n    this.setState({moves: 0, time: 0, board, win:false}); //reset state\n  }\n\n  checkIfSolvable(board, size){\n    //count inversions\n    let invCount = 0;\n    for(let i = 0; i < size*size-1; i++) {\n      for(let j = i+1; j < size*size; j++) {\n        if(board[i] && board[j] && board[i] > board[j]) invCount++;\n      }\n    }\n    //check if blank is in a even or odd row\n    let blankPos = 0;\n    blankPos = Math.abs(Math.floor(board.findIndex((v)=>v===0)/size)-size);\n    if(size%2) return !(invCount%2);\n    else {\n      if(blankPos%2) return !(invCount%2);\n      else return !!(invCount%2);\n    }\n  }\n\n  startTimer = () => {\n    this.setState( {time: this.state.time+1});\n    this.timer = setInterval( () => {this.setState( {time: this.state.time+1})}, 1000 );\n  }\n\n  swap = (a,b, board) => {\n    let temp = board[a];\n    board[a] = board[b];\n    board[b] = temp;\n    return board;\n  }\n\n  checkWin = () => {\n    let tempBoard = [];\n    for(let i = 0; i<this.state.size*this.state.size; i++) {tempBoard.push(i+1)}\n    tempBoard[tempBoard.length-1] = 0;\n    if(tempBoard.length !== this.state.board.length) return false;\n    for (var i = 0; i < tempBoard.length; i++) {\n      if (tempBoard[i] !== this.state.board[i]) return false;\n    }\n    return true;\n  }\n\n  move = (key) => {\n    if(this.state.board[key] === 0) { return } //dont move if clicked on empty tile\n\n    let direction = this.checkPossibleDirection(key);\n    if(direction) {\n      if(!this.state.time) { //start timer on first move\n        this.startTimer();\n      }\n      this.setState({moves: this.state.moves+1}); //increment moves counter\n      let currentIndex = this.state.board.findIndex((v)=>v===0);\n      let tempBoard = [...this.state.board];\n      while(currentIndex!==key){\n        switch(direction) {\n          case 'up':\n              tempBoard = this.swap(currentIndex, currentIndex+this.state.size, tempBoard);\n              currentIndex = currentIndex+this.state.size;\n            break;\n          case 'down':\n              tempBoard = this.swap(currentIndex, currentIndex-this.state.size, tempBoard);\n              currentIndex = currentIndex-this.state.size;\n            break;\n          case 'left':\n              tempBoard = this.swap(currentIndex, currentIndex+1, tempBoard);\n              currentIndex = currentIndex+1;\n            break;\n          case 'right':\n              tempBoard = this.swap(currentIndex, currentIndex-1, tempBoard);\n              currentIndex = currentIndex-1;\n            break;\n          default:\n            break;\n        }\n      }\n      this.setState({board: tempBoard}, () => {\n        if(this.checkWin()) {\n          clearInterval(this.timer);\n          this.setState({win: true});\n        } else if(this.state.win) {\n          this.setState({win: false});\n          this.startTimer();\n      }\n      });\n    }\n  }\n\n  checkPossibleDirection = (key) => {\n    let index=key; //reset key value\n    //check up\n    while(key >= this.state.size) {\n      key-=this.state.size;\n      if(this.state.board[key] === 0) return \"up\";\n    }\n    //check down\n    key = index;\n    while(key < this.state.size*(this.state.size-1)) {\n      key+=this.state.size;\n      if(this.state.board[key] === 0) return \"down\";\n    }\n    //check left\n    key = index;\n    while(key> index-index%this.state.size) {\n      key-=1;\n      if(this.state.board[key] === 0) return \"left\";\n    }\n    //check right\n    key = index;\n    while(key< (index+this.state.size-(index%this.state.size))-1) {\n      key+=1;\n      if(this.state.board[key] === 0) return \"right\";\n    }\n    return 0;\n  }\n\n  changeSize = (size) => {\n    this.setState({size}, () => this.newBoard());\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>The <span className=\"fifteen\">15</span> Puzzle</h1>\n        <div className=\"Menu\">\n          <NewGameButton onClick={this.newBoard}/>\n          <Time time={this.parseTime()}/>\n          <Moves moves={this.state.moves}/>\n        </div>\n        <Game board={this.state.board} move={this.move} size={this.state.size}/>\n        <ChangeSize onClick={this.changeSize}/>\n        <Win win={this.state.win} time={this.parseTime()} moves={this.state.moves}/>\n      </div>\n    );\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}